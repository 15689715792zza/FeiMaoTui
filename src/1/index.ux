<!-- 引入自定义组件 -->
<import name="todo-list" src="./todolist"></import>

<template>
  <div class="demo-page">
    <!-- tabs组件 -->
    <tabs onchange="changeTabIndex">
      <!-- tab-bar组件 -->
      <tab-bar class="tab-bar">
        <text class="tab {{currentIndex === 0 ? 'active' : ''}}">未完成</text>
        <text class="tab {{currentIndex === 1 ? 'active' : ''}}">已完成</text>
        <text class="tab {{currentIndex === 2 ? 'active' : ''}}">添加</text>
      </tab-bar>
      <!-- tab-content组件 -->
      <tab-content class="tab-content">
        <div class="tab-content-section">
          <!-- 列表实现 -->
          <list class="list">
            <!-- 任务列表 -->
            <list-item type="taskList" class="content-item" for="taskList">
              <!-- 使用自定义组件 -->
              <todo-list is-checked="{{false}}" content="{{$item}}" onchange-state="finishTaskCheckBoxClick($idx)"></todo-list>
            </list-item>
          </list>
        </div>
        <div class="tab-content-section">
          <list class="list">
            <!-- 完成列表 -->
            <list-item type="resolvedList" class="content-item" for="resolvedList">
              <todo-list is-checked="{{true}}" text-decoration="line-through" content="{{$item}}" onchange-state="resetTaskCheckedBoxClick($idx)"></todo-list>
            </list-item>
          </list>
        </div>
        <div class="tab-content-sectio">
          <div class="add-task">
            <input type="text" class="input" placeholder="添加你的任务内容" value="{{newTask}}" onchange="syncValue"></input>
            <input type="button" class="btn" value="提交" onclick="addTaskBtnClick"></input>
          </div>
        </div>
      </tab-content>
    </tabs>
  </div>
</template>

<script>
  // TODO: ⚠️ 提示和存储功能，使用须在 manifest.json 添加对应声明
  import prompt from '@system.prompt'
  import storage from '@system.storage'

  export default {
    data: {
      newTask: '',
      currentIndex: 0,
      taskList: ['我的任务'],
      resolvedList: []
    },
    onInit () {
      this.$page.setTitleBar({
        text: 'Todo List',
        backgroundColor: '#09ba07',
        textColor: '#fff'
      })

      this.getStorage('resolvedList').then((value) => {
        this.resolvedList = value
      })

      this.getStorage('taskList').then((value) => {
        this.taskList = value
      })
    },
    addTaskBtnClick () {
      if (this.newTask) {
        this.taskList.unshift(this.newTask)

        this.newTask = ''

        prompt.showToast({
          message: '添加成功'
        })
      }
    },
    syncValue (e) {
      this.newTask = e.value
    },
    finishTaskCheckBoxClick (idx) {
      const val = this.taskList.splice(idx, 1)[0]

      this.resolvedList.unshift(val)

      this.saveStorage()
    },
    resetTaskCheckedBoxClick (idx) {
      const val = this.resolvedList.splice(idx, 1)[0]

      this.taskList.unshift(val)

      this.saveStorage()
    },
    saveStorage () {
      this.setStorage('taskList', this.taskList)
      this.setStorage('resolvedList', this.resolvedList)
    },
    setStorage (key, value) {
      // 设置storage
      storage.set({
        key,
        value: JSON.stringify(value),
        fail(data, code) {
          console.log(`setStorage fail, code = ${code}`)
        }
      })
    },
    changeTabIndex (e) {
      this.currentIndex = e.index
    },
    getStorage (key) {
      return new Promise((resolve, reject) => {
        // 获取storage
        storage.get({
          key,
          success(data) {
            if(data) {
              resolve(JSON.parse(data))
            }
          },
          fail(data, code) {
            console.log(`getStorage fail, code = ${code}`)
            reject({data, code})
          }
        })
      })
    }
  }
</script>

<style>
  .tutorial-page {
    background-color: #f1eaea;
  }

  .tab-bar {
    position: fixed;
    bottom: 0;
    background-color: #09ba07;
  }

  .tab-bar .tab {
    height: 60px;
    color: #fff;
  }

  .tab-bar .active {
    color: #e5ff51;
  }

  .list {
    padding-bottom: 100px;
  }

  .complete-content {
    text-decoration: line-through;
  }

  .add-task {
    flex-direction: column;
    width: 100%;
    height: 300px;
    padding: 50px 20px;
    background-color: #ffffff;
  }

  .input {
    width: 100%;
    height: 80px;
    font-size: 32px;
    border: 0px solid #e0e0e0;
    border-bottom-width: 1px;
  }

  .btn {
    width: 250px;
    height: 76px;
    color: #ffffff;
    font-size: 30px;
    background-color: #f3c706;
    border-radius: 10px;
  }

  .add-task .btn {
    margin-top: 40px;
    align-self: flex-end;
  }
</style>